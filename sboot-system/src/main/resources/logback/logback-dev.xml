<?xml version="1.0" encoding="UTF-8"?>
<!--scan自动扫描重新加载配置 scanPeriod重新加载配置的周期-->
<configuration debug="true" scan="true" scanPeriod="10 seconds">

	<contextName>${spring.application.name}</contextName>
	<!--定义参数,后面可以通过${app.name}使用-->
	<!--<property name="app-name" value="provider"/>-->

	<!--凡是springProperty的配置都将出现在生成的json中，如果原json中已有相同key则将覆盖-->
	<springProperty scope="context" name="spring.application.name" source="spring.application.name"/>
	<springProperty scope="context" name="server.port" source="server.port"/>
	<springProperty scope="context" name="logstash.server-addr" source="logstash.server-addr"/>
	<springProperty scope="context" name="log.level" source="log.level"/>
	<springProperty scope="context" name="log.path" source="log.path"/>

	<!--ConsoleAppender 用于在屏幕上输出日志-->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来-->
		<!--这里定义了 DEBUG，也就是控制台不会输出比ERROR级别小的日志-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>${log.level}</level>
		</filter>
		<!-- encoder 默认配置为PatternLayoutEncoder -->
		<!--定义控制台输出格式-->
		<encoder>
			<!--<pattern>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n</pattern>-->
			<!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
			<pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
		</encoder>
	</appender>

	<root level="debug">
		<appender-ref ref="stdout"/>
	</root>

	<!--对于类路径以 com.example.logback 开头的Logger,输出级别设置为warn,并且只输出到控制台-->
	<!--这个logger没有指定appender，它会继承root节点中定义的那些appender-->
	<!--<logger name="com.example.logback" level="warn"/>-->

	<!--通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger-->
	<!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender-->
	<!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况-->
	<!--additivity表示要不要使用rootLogger配置的appender进行输出-->
	<!--    <logger name="mytest" level="info" additivity="false">-->
	<!--        <appender-ref ref="stdout"/>-->
	<!--    </logger>-->
</configuration>