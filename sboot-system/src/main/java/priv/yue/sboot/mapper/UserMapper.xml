<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="priv.yue.sboot.mapper.UserMapper">

	<sql id="Base_Column_List">
		user_id, dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path,
    `password`, is_admin, enabled, create_by, update_by, pwd_reset_time, create_time,
    update_time, salt, deleted
	</sql>

	<resultMap id="BaseResultMap" type="priv.yue.sboot.domain.User">
		<id column="user_id" jdbcType="BIGINT" property="userId"/>
		<result column="dept_id" jdbcType="BIGINT" property="deptId"/>
		<result column="username" jdbcType="VARCHAR" property="username"/>
		<result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
		<result column="gender" jdbcType="VARCHAR" property="gender"/>
		<result column="phone" jdbcType="VARCHAR" property="phone"/>
		<result column="email" jdbcType="VARCHAR" property="email"/>
		<result column="avatar_name" jdbcType="VARCHAR" property="avatarName"/>
		<result column="avatar_path" jdbcType="VARCHAR" property="avatarPath"/>
		<result column="password" jdbcType="VARCHAR" property="password"/>
		<result column="is_admin" jdbcType="INTEGER" property="isAdmin"/>
		<result column="enabled" jdbcType="INTEGER" property="enabled"/>
		<result column="create_by" jdbcType="VARCHAR" property="createBy"/>
		<result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
		<result column="pwd_reset_time" jdbcType="TIMESTAMP" property="pwdResetTime"/>
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
		<result column="salt" jdbcType="VARCHAR" property="salt"/>
		<result column="deleted" jdbcType="INTEGER" property="deleted"/>
	</resultMap>

	<resultMap id="PartResultMap" type="priv.yue.sboot.domain.User" extends="BaseResultMap">
		<association property="dept" select="priv.yue.sboot.mapper.DeptMapper.selectById" column="dept_id"/>
	</resultMap>

	<resultMap id="FullResultMap" type="priv.yue.sboot.domain.User" extends="BaseResultMap">
		<association property="dept" select="priv.yue.sboot.mapper.DeptMapper.selectById" column="dept_id"/>
		<collection property="roles" ofType="priv.yue.sboot.domain.Role"
		            select="priv.yue.sboot.mapper.RoleMapper.selectRolesByUser"
		            column="user_id"/>
	</resultMap>

	<resultMap id="FullResultMapOnce" type="priv.yue.sboot.domain.User" extends="BaseResultMap">
		<association property="dept" javaType="priv.yue.sboot.domain.Dept" >
			<id column="dept_dept_id" jdbcType="BIGINT" property="deptId"/>
			<result column="dept_pid" jdbcType="BIGINT" property="pid"/>
			<result column="dept_path" jdbcType="VARCHAR" property="path"/>
			<result column="dept_name" jdbcType="VARCHAR" property="name"/>
			<result column="dept_sort" jdbcType="INTEGER" property="sort"/>
			<result column="dept_enabled" jdbcType="BIT" property="enabled"/>
			<result column="dept_create_by" jdbcType="VARCHAR" property="createBy"/>
			<result column="dept_update_by" jdbcType="VARCHAR" property="updateBy"/>
			<result column="dept_create_time" jdbcType="TIMESTAMP" property="createTime"/>
			<result column="dept_update_time" jdbcType="TIMESTAMP" property="updateTime"/>
		</association>
		<collection property="roles" ofType="priv.yue.sboot.domain.Role" >
			<id column="role_role_id" jdbcType="BIGINT" property="roleId"/>
			<result column="role_name" jdbcType="VARCHAR" property="name"/>
			<result column="role_pid" jdbcType="BIGINT" property="pid"/>
			<result column="role_description" jdbcType="VARCHAR" property="description"/>
			<result column="role_data_scope" jdbcType="VARCHAR" property="dataScope"/>
			<result column="role_create_by" jdbcType="VARCHAR" property="createBy"/>
			<result column="role_update_by" jdbcType="VARCHAR" property="updateBy"/>
			<result column="role_create_time" jdbcType="TIMESTAMP" property="createTime"/>
			<result column="role_update_time" jdbcType="TIMESTAMP" property="updateTime"/>
		</collection>
	</resultMap>

	<select id="selectByUser" resultMap="FullResultMap">
		select distinct(user.user_id) id, user.* from sys_user user
		    left join sys_dept dept on user.dept_id = dept.dept_id
		    left join sys_user_role sur on user.user_id = sur.user_id
			left join sys_role role on sur.role_id = role.role_id
		<where>
			<if test="map.search != null and map.search != ''">
				and concat_ws(user.username, user.nick_name, user.phone, user.gender, dept.name, role.name) like "%"#{map.search}"%"
			</if>
			and (dept.path like concat(#{map.path},#{map.userDeptId},',%') or dept.dept_id = #{map.userDeptId})
			and user.deleted = 0
		</where>
		<if test="map.orderBy != null and map.orderBy != ''">
			order by ${map.orderBy}
		</if>
	</select>

	<select id="selectByUserOnce" resultMap="FullResultMapOnce">
		select user.*,
		dept.dept_id as dept_dept_id,
		dept.pid as dept_pid,
		dept.`path` as dept_path,
		dept.`name` as dept_name,
		dept.sort as dept_sort,
		dept.enabled as dept_enabled,
		dept.create_by as dept_create_by,
		dept.update_by as dept_update_by,
		dept.create_time as dept_create_time,
		dept.update_time as dept_update_time,
		role.role_id as role_role_id,
		role.`name` as role_name,
		role.pid as role_pid,
		role.description as role_description,
		role.data_scope as role_data_scope,
		role.create_by as role_create_by,
		role.update_by as role_update_by,
		role.create_time as role_create_time,
		role.update_time as role_update_time
		from
		(
		select distinct(user.user_id) id, user.*
		from sys_user user
		left join sys_dept dept on user.dept_id = dept.dept_id
		left join sys_user_role sur on user.user_id = sur.user_id
		left join sys_role role on sur.role_id = role.role_id
		<where>
			<if test="map.search != null and map.search != ''">
				and concat_ws(user.username, user.nick_name, user.phone, user.gender, dept.name, role.name) like
				"%"#{map.search}"%"
			</if>
			and (dept.path like concat(#{map.path},#{map.userDeptId},',%') or dept.dept_id = #{map.userDeptId})
			and user.deleted = 0
		</where>
		<if test="map.orderBy != null and map.orderBy != ''">
			order by ${map.orderBy}
		</if>
		limit #{map.limitBegin}, #{map.limitEnd}
		) user left join sys_dept dept on user.dept_id = dept.dept_id
		left join sys_user_role sur on user.user_id = sur.user_id
		left join sys_role role on sur.role_id = role.role_id
		order by
		user.create_time desc
	</select>

	<select id="selectByUserCount" resultType="long">
		select COUNT(distinct(user.user_id)) from sys_user user
		left join sys_dept dept on user.dept_id = dept.dept_id
		left join sys_user_role sur on user.user_id = sur.user_id
		left join sys_role role on sur.role_id = role.role_id
		<where>
			<if test="map.search != null and map.search != ''">
				and concat_ws(user.username, user.nick_name, user.phone, user.gender, dept.name, role.name) like "%"#{map.search}"%"
			</if>
			and (dept.path like concat(#{map.path},#{map.userDeptId},',%') or dept.dept_id = #{map.userDeptId})
			and user.deleted = 0
		</where>
	</select>

	<select id="selectByName" resultMap="FullResultMap">
		select
		<include refid="Base_Column_List"/>
		from sys_user a where username = #{username} and deleted = 0
	</select>

	<select id="selectByNameNoRoles" resultMap="PartResultMap">
		select
		<include refid="Base_Column_List"/>
		from sys_user where username = #{username} and deleted = 0
	</select>

	<select id="selectByPrimaryKey" resultMap="FullResultMap">
		select
		<include refid="Base_Column_List"/>
		from sys_user
		where user_id = #{userId}
		and deleted = 0
	</select>

	<insert id="setRole">
		insert into sys_user_role (`user_id`, `role_id`) values (#{userId}, #{roleId})
	</insert>

	<insert id="deleteRole">
		delete from sys_user_role where user_id = #{user_id}
	</insert>

</mapper>